{
  
    
        "post0": {
            "title": "Title",
            "content": "During the 2018 RDKit Google Summer of Code (GSoC) project to port MolVS to C++, doing the tautomer enumeration and canonicalization were stretch goals. Susan actually managed to complete the tautomer enumeration, but since canonicalization wasn&#39;t complete, we didn&#39;t publicize this particularly widely. As part of the work for the 2020.03 release, I implemented Matt&#39;s canonicalization scheme and we recently merged that into the RDKit core. Since this is a topic that may be contentious, and since making changes to the canonicalization algorithm post-release will have be done very deliberately, I&#39;d like to collect some feedback before we do the release in a couple of months. . The implementation attempts to exactly duplicate what is currently being done in MolVS. Here&#39;s how Matt describes the process in the MolVS documentation: . Enumerate all possible tautomers using transform rules. | Use scoring system to determine canonical tautomer. | Canonical tautomer should be “reasonable” from a chemist’s point of view, but isn’t guaranteed to be the most energetically favourable. | The scoring scheme: . aromatic ring (defined by all bonds being aromatic) consisting entirely of carbons: 250 points | other aromatic rings : 100 points | a set of substructures are scored (if present). Here&#39;s the current (as of this writing) set of substructures and their associated scores (these are defined here): . {&quot;benzoquinone&quot;, &quot;[#6]1([#6]=[#6][#6]([#6]=[#6]1)=,:[N,S,O])=,:[N,S,O]&quot;, 25}, {&quot;oxim&quot;, &quot;[#6]=[N][OH]&quot;, 4}, {&quot;C=O&quot;, &quot;[#6]=,:[#8]&quot;, 2}, {&quot;N=O&quot;, &quot;[#7]=,:[#8]&quot;, 2}, {&quot;P=O&quot;, &quot;[#15]=,:[#8]&quot;, 2}, {&quot;C=hetero&quot;, &quot;[#6]=[!#1;!#6]&quot;, 1}, {&quot;methyl&quot;, &quot;[CX4H3]&quot;, 1}, {&quot;guanidine terminal=N&quot;, &quot;[#7][#6](=[NR0])[#7H0]&quot;, 1}, {&quot;guanidine endocyclic=N&quot;, &quot;[#7;R][#6;R]([N])=[#7;R]&quot;, 2}, {&quot;aci-nitro&quot;, &quot;[#6]=[N+]([O-])[OH]&quot;, -4}}; . | one point is subtracted for each H attached to P, S, Se, or Te . | . The highest scoring tautomer is selected. In the event of ties, the tautomer with the lexicographically smaller canonical SMILES is picked. . If this is something you feel strongly about, please try the code out and see what you think. If you see behavior you really don&#39;t like, or that you think is a bug, please add a comment to the associated issue in github: https://github.com/rdkit/rdkit/issues/2908 (preferred) or reply to the thread that I will create on the rdkit-discuss mailing list. . Remember that the goal of the exercise here is not to produce the &quot;best&quot; tautomer, but to produce a canonical one (always the same result for molecules which are tautomerically equivalent). We hope that this is also reasonable - in that it doesn&#39;t make a chemist&#39;s eyes burn - but that&#39;s not the primary goal. . So how can you try it out? . This is C++ code, so you need an RDKit build done from the github master. I&#39;ve done conda builds and made them available for people to try. . At the moment I&#39;ve only built the beta version for python 3.7 on linux and windows. If you would like to do some testing on the Mac, let me know and I can do a build there too. . Here&#39;s how to setup a conda environment to use the beta: . % conda create -n py37_tautomer_beta python=3.7 jupyter % conda activate py37_tautomer_beta % conda install -c rdkit/label/beta rdkit . Ok, let&#39;s look at some examples: . from rdkit import Chem from rdkit.Chem.Draw import IPythonConsole from rdkit.Chem import Draw import rdkit print(rdkit.__version__) . 2020.03.1dev1 . RDKit WARNING: [11:00:33] Enabling RDKit 2020.03.1dev1 jupyter extensions . from rdkit.Chem.MolStandardize import rdMolStandardize . enumerator = rdMolStandardize.TautomerEnumerator() . m = Chem.MolFromSmiles(&#39;Oc1c(cccc3)c3nc2ccncc12&#39;) m . Get the canonical tautomer: . enumerator.Canonicalize(m) . The canonicalizer starts by enumerating a molecule&#39;s tautomers. If you want to see those, you can use the Enumerate() method: . tauts = enumerator.Enumerate(m) Draw.MolsToGridImage(tauts) . I find this function, which reorders the list of tautomers so that the canonical one is in the first position, really useful: . def reorderTautomers(m): enumerator = rdMolStandardize.TautomerEnumerator() canon = enumerator.Canonicalize(m) csmi = Chem.MolToSmiles(canon) res = [canon] tauts = enumerator.Enumerate(m) smis = [Chem.MolToSmiles(x) for x in tauts] stpl = sorted((x,y) for x,y in zip(smis,tauts) if x!=csmi) res += [y for x,y in stpl] return res . So now we can display all the tautomers found for a molecule. The first one drawn is the canonical one: . Draw.MolsToGridImage(reorderTautomers(m)) . Draw.MolsToGridImage(reorderTautomers(Chem.MolFromSmiles(&#39;CN=c1nc[nH]cc1&#39;))) . Draw.MolsToGridImage(reorderTautomers(Chem.MolFromSmiles(&#39;CC=CO&#39;))) . As an aside, it&#39;s worth noticing that double bond stereochemistry is removed in all tautomers if the double bond is involved in the tautomerization: . m = Chem.MolFromSmiles(&#39;C/C=C(/O)F&#39;) tauts = reorderTautomers(m) print(&#39;Original SMILES:&#39;,Chem.MolToSmiles(m)) print(&#39;Tautomers (canonical first):&#39;,[Chem.MolToSmiles(x) for x in tauts]) . Original SMILES: C/C=C(/O)F Tautomers (canonical first): [&#39;CCC(=O)F&#39;, &#39;CC=C(O)F&#39;] .",
            "url": "https://greglandrum.github.io/rdkit-blog/2020/01/25/trying-the-tautomer-canonicalization-code.html",
            "relUrl": "/2020/01/25/trying-the-tautomer-canonicalization-code.html",
            "date": " • Jan 25, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://greglandrum.github.io/rdkit-blog/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "Similarity maps with the new drawing code",
            "content": "As part of the 2019.09 release we added a C++ implementation of the RDKit&#39;s similarity map functionality (https://jcheminf.biomedcentral.com/articles/10.1186/1758-2946-5-43). I forgot to mention this during the &quot;What&#39;s New&quot; bit of my presentation at the UGM, but I think it&#39;s worth calling attention to. So here&#39;s a quick blog post. . from rdkit import Chem from rdkit.Chem import Draw from rdkit.Chem.Draw import SimilarityMaps from IPython.display import SVG import io from PIL import Image import numpy as np import rdkit print(rdkit.__version__) . RDKit WARNING: [11:53:45] Enabling RDKit 2019.09.2 jupyter extensions . 2019.09.2 . I start by using &quot;classic&quot; similarity map functionality to show why atorvastatin (Lipitor) and rosuvastatin (Crestor) are similar to each other when using the Morgan fingerprint. . Here are the two molecules: . atorvastatin = Chem.MolFromSmiles(&#39;O=C(O)C[C@H](O)C[C@H](O)CCn2c(c(c(c2c1ccc(F)cc1)c3ccccc3)C(=O)Nc4ccccc4)C(C)C&#39;) rosuvastatin = Chem.MolFromSmiles(&#39;OC(=O)C[C@H](O)C[C@H](O) C=C c1c(C(C)C)nc(N(C)S(=O)(=O)C)nc1c2ccc(F)cc2&#39;) Draw.MolsToGridImage((atorvastatin,rosuvastatin)) . To use the new drawing code, we create a Draw2D object and pass that to SimilarityMaps.GetSimilarityMapForFingerprint: . def show_png(data): bio = io.BytesIO(data) img = Image.open(bio) return img . d = Draw.MolDraw2DCairo(400, 400) _, maxWeight = SimilarityMaps.GetSimilarityMapForFingerprint(atorvastatin, rosuvastatin, lambda m, i: SimilarityMaps.GetMorganFingerprint(m, i, radius=2, fpType=&#39;bv&#39;), draw2d=d) d.FinishDrawing() show_png(d.GetDrawingText()) . We can do the same thing with count-based fingerprints: . d = Draw.MolDraw2DCairo(400, 400) _, maxWeight = SimilarityMaps.GetSimilarityMapForFingerprint(atorvastatin, rosuvastatin, lambda m, i: SimilarityMaps.GetMorganFingerprint(m, i, radius=2, fpType=&#39;count&#39;), draw2d=d) d.FinishDrawing() show_png(d.GetDrawingText()) . The other GetSimilarityMapFrom... functions also accept the optional draw2d argument. Here&#39;s a visualization of the contributions made by the atoms in atorvastatin to its calculatied logp value: . from rdkit.Chem import rdMolDescriptors ator_contribs = rdMolDescriptors._CalcCrippenContribs(atorvastatin) d = Draw.MolDraw2DCairo(400, 400) SimilarityMaps.GetSimilarityMapFromWeights(atorvastatin,[x[0] for x in ator_contribs],draw2d=d) d.FinishDrawing() show_png(d.GetDrawingText()) . And a couple more visualizations of various partial charge schemes. . Starting with Gasteiger-Marsilli charges: . from rdkit.Chem import rdPartialCharges rdPartialCharges.ComputeGasteigerCharges(atorvastatin) chgs = [x.GetDoubleProp(&quot;_GasteigerCharge&quot;) for x in atorvastatin.GetAtoms()] d = Draw.MolDraw2DCairo(400, 400) SimilarityMaps.GetSimilarityMapFromWeights(atorvastatin,chgs,draw2d=d) d.FinishDrawing() show_png(d.GetDrawingText()) . And also the partial charges calculated with extended Hueckel theory (eHT) using Mulliken analysis: . from rdkit.Chem import rdEHTTools from rdkit.Chem import rdDistGeom mh = Chem.AddHs(atorvastatin) rdDistGeom.EmbedMolecule(mh) _,res = rdEHTTools.RunMol(mh) static_chgs = res.GetAtomicCharges()[:atorvastatin.GetNumAtoms()] d = Draw.MolDraw2DCairo(400, 400) SimilarityMaps.GetSimilarityMapFromWeights(atorvastatin,list(static_chgs),draw2d=d) d.FinishDrawing() show_png(d.GetDrawingText()) . As one final demo, I&#39;ll use the method to visualize the variability of the eHT charges with conformation for atorvastatin. . Start by generating 10 diverse conformers, calculating the charges for each, and plotting the average: . mh = Chem.AddHs(atorvastatin) ps = rdDistGeom.ETKDGv2() ps.pruneRmsThresh = 0.5 ps.randomSeed = 0xf00d rdDistGeom.EmbedMultipleConfs(mh,10,ps) print(f&#39;Found {mh.GetNumConformers()} conformers&#39;) chgs = [] for conf in mh.GetConformers(): _,res = rdEHTTools.RunMol(mh,confId=conf.GetId()) chgs.append(res.GetAtomicCharges()[:atorvastatin.GetNumAtoms()]) chgs = np.array(chgs) mean_chgs = np.mean(chgs,axis=0) std_chgs = np.std(chgs,axis=0) d = Draw.MolDraw2DCairo(400, 400) SimilarityMaps.GetSimilarityMapFromWeights(atorvastatin,list(mean_chgs),draw2d=d) d.FinishDrawing() show_png(d.GetDrawingText()) . Found 10 conformers . That doesn&#39;t look hugely different from what we saw above. . To show the variability, plot the standard deviation of the charges across the 10 conformers: . print(std_chgs) print(max(std_chgs),min(std_chgs)) d = Draw.MolDraw2DCairo(400, 400) SimilarityMaps.GetSimilarityMapFromWeights(atorvastatin,list(std_chgs),draw2d=d) d.FinishDrawing() show_png(d.GetDrawingText()) . [0.01292592 0.00743163 0.01971312 0.01433223 0.01063085 0.01283745 0.01219511 0.00748435 0.01234194 0.01492494 0.00640842 0.02264999 0.02481744 0.00987842 0.00843151 0.01289956 0.00560632 0.00498617 0.00604883 0.005569 0.00452067 0.00796675 0.00718033 0.00581337 0.00702613 0.00634237 0.00699789 0.00539868 0.00521868 0.02412709 0.03131741 0.03709349 0.00657276 0.01175903 0.00674661 0.01012909 0.0050995 0.01139418 0.00831795 0.00581207 0.00960073] 0.03709348867462464 0.00452067345998171 . The deviations aren&#39;t huge (the printed array shows that), but the largest value is clearly the amide N. . There&#39;s definitely a ToDo here to improve the way the negative contours are drawn so that the fact that they are being drawn with dashed lines is visible. .",
            "url": "https://greglandrum.github.io/rdkit-blog/tutorial/2020/01/03/similarity-maps-with-new-drawing-code.html",
            "relUrl": "/tutorial/2020/01/03/similarity-maps-with-new-drawing-code.html",
            "date": " • Jan 3, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://greglandrum.github.io/rdkit-blog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://greglandrum.github.io/rdkit-blog/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}